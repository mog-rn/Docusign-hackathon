name: Backend deploy - GCP

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: songa-386805
  GAR_LOCATION: us-west2
  SERVICE: clm-backend
  REGION: us-west2

defaults:
  run:
    working-directory: backend

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} 
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Docker Auth
        run: |
          gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev
              
      - name: Build and Push Container
        run: |
          docker build \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg AWS_STORAGE_BUCKET_NAME="${{ secrets.AWS_STORAGE_BUCKET_NAME }}" \
            --build-arg AWS_S3_REGION_NAME="${{ secrets.AWS_S3_REGION_NAME }}" \
            --build-arg AWS_PRESIGNED_EXPIRY="${{ secrets.AWS_PRESIGNED_EXPIRY }}" \
            -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE/$SERVICE:$GITHUB_SHA" \
            -f Dockerfile .
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE/$SERVICE:$GITHUB_SHA"
 
      - name: Verify Deployment Health Check
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE --region $REGION --format='value(status.url)')
          echo "Checking if service is reachable at: $SERVICE_URL"
          
          for i in {1..5}; do
            curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL" | grep "200" && echo "✅ Service is UP!" && exit 0
            echo "Waiting for service to become available..."
            sleep 10
          done
          
          echo "❌ Deployment failed: Service did not return HTTP 200"
          exit 1
