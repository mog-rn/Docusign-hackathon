openapi: 3.0.0
info:
  title: Document Management System API
  version: '1.0.0'
  description: Authentication and Authorization API for multi-tenant document management system

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
          
    LoginRequest:
      type: object
      required:
        - email
        - password
        - organizationId
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        organizationId:
          type: string
          format: uuid
          
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          type: object
          properties:
            userId:
              type: string
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            organizationId:
              type: string
            roles:
              type: array
              items:
                type: string

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        organizationId:
          type: string
          format: uuid

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid input
        '409':
          description: Email already exists
        '422':
          description: Invalid organization ID

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials
        '401':
          description: Unauthorized
        '404':
          description: Organization not found

  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid refresh token

  /organizations/{organizationId}/users/{userId}/roles:
    parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get user roles
      tags:
        - Authorization
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        roleId:
                          type: string
                        name:
                          type: string
                        permissions:
                          type: array
                          items:
                            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found

    post:
      summary: Assign role to user
      tags:
        - Authorization
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleId:
                  type: string
      responses:
        '200':
          description: Role assigned successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Role not found